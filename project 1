# -*- coding: utf-8 -*-
"""Project Lokhi .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i3pJYs5fd58bEGJoi0oeJRrMOpkr95aY

A person divided an amount of X into two parts and invested in two different schemes. In
one he got 10% profit and in the other he got 12%. If the profit percentages are
interchanged with these investments he would have got 120 less. Write a function to the
ratio between his investments in the two schemes having X as input parameter
"""

def all_inputs(x,low_per,high_per,loss):
  a=(x-(loss*50))/((high_per-low_per)*100)
  b=(x-int(a))/1000
  print(int(a/1000),"/",int(b))
amount = int(input("Enter the Amount in Rupees : "))
choice = int(input("Type Of Execution (1.Direct,2.All Parameters) : "))
if choice == 1 :
  ratio(amount)
elif choice == 2 :
  low_per = float(input("Enter The Lower Percentge : "))
  high_per = float(input("Enter the Higher Percentage : "))
  loss = int(input("Enter The Loss Amount In Rupees : "))
  all_inputs(amount,low_per,high_per,loss)
else:
  quit

"""A solid cube of side Y m is kept at a room temperature of 32oC. The coefficient of linear
thermal expansion of the cube material is K / oC and the bulk modulus is X GPa. If the cube is
5 constrained all around and heated uniformly to 42oC, then the magnitude of volumetric
(mean) stress (in MPa) induced due to heating is _________. Write a function in such a way
that Y,K and X are input parameters and Volumetric Mean induced
"""

def mag_of_vol_stress(y,k,x,t_diff):
  mag = 3 * k * x * t_diff
  print("The Magnitude of Volumetric Stress : ",int(mag),"Mpa")
  
y=float(input("Enter the Length of Side in Meters : "))
initial_temp = float(input("Enter the Initial Temperature in Celsius : "))
lte_mul = float(input("Enter the Multiplication of Linear Thermal Expansion : "))
lte_power = float(input("Enter the Power of Linear thermal Expansion : "))
b_mod = float(input("Enter the Bulk modulus in GPA : "))
final_temp=float(input("Enter the Final Temperature in Celsius : "))


mag_of_vol_stress(y,lte_mul*(10**(lte_power)),b_mod*(10**3),final_temp - initial_temp)

"""The length, width and thickness of a steel sample are Y mm, X mm and Z mm, respectively.
Its thickness needs to be uniformly reduced by K mm in a single pass by using horizontal slab
milling. The milling cutter (diameter: 100 mm, width: 50 mm) has 20 teeth and rotates at R
rpm. The feed per tooth is 0.05 mm. The feed direction is along the length of the sample. If
the over-travel distance is the same as the approach distance, the approach distance and
time taken to complete the required machining task are. Write a function to compute the
time take to complete required machining taken and the input parameters being X,Y,Z,K,R
"""

D=100
fpt=0.05
numofteeth=20
def time(x,y,z,k,r):
  app_dis = (2*(100-k))**0.5
  print("Approach Distance  : ",app_dis,"mm")
  time_req = (y + app_dis + app_dis)/(fpt*numofteeth*r)
  print("Time Taken to Complete the Machining : %.2f"%(time_req*60),"seconds")
x = float(input("Enter the X Dimension in mm : "))
y = float(input("Enter the Y Dimension in mm : "))
z = float(input("Enter the Z Dimension in mm : "))
k = float(input("Enter the uniform Reduction of Thickness in mm : "))
r = float(input("Enter the RPM of The Milling Cutter in rpm : "))
time(y,x,z,k,r)

"""See the diagram below and create a function to compute 100 points of the trajectory"""

import math
import matplotlib.pyplot as plt
angle = float(input("Enter The Angle Of Projectile in Degrees : "))
init_velocity = float(input("Enter The Initial Velocity in Meters/Second : "))
choice = int(input("You wanna Know the Projectile Until The Ground or Mid-Range ( 1.Ground , 2.Mid-Range): "))
def MidRange(angle,init_velocity):
  xo = float(input("Enter The Distance From Starting Point in Meters : "))
  time=xo/(init_velocity*(math.cos(math.radians(angle))))
  plot_list = []
  x_list=[]
  y_list=[]
  x=0
  y=0
  while x < xo:
    meta_list=[]
    x_list.append(round(x,2))
    meta_list.append(round(x,2))
    x+=xo/100
    y_list.append(round(y,2))
    meta_list.append(round(y,2))
    y = (x*round(math.tan(math.radians(angle)),3))-((9.81*(x**2))/(2*(init_velocity**2)*((round(math.cos(math.radians(angle)),3)))**2))
    plot_list.append(meta_list)
  print("===Hundred Points Of Trajectory===\n")
  print(plot_list,"\n")
  print("Time Of Flight is : ",round(time,2),"seconds\n")
  print("Maximum Height Reached : ",max(y_list),"meters\n")
  plt.plot(x_list,y_list)
  plt.xlabel('x - axis')
  plt.ylabel('y - axis') 
  plt.title('Trajectory')
  plt.show()
def Ground(angle,init_velocity):
  xo = round(((init_velocity**2)*(math.sin(2*math.radians(angle))))/9.81,2)
  time=xo/(init_velocity*(math.cos(math.radians(angle))))
  plot_list = [[0,0]]
  x_list=[]
  y_list=[]
  x=0
  y=0
  while x <= xo:
    meta_list=[]
    x_list.append(round(x,2))
    meta_list.append(round(x,2))
    x+=xo/100
    y_list.append(round(y,2))
    meta_list.append(round(y,2))
    y = (x*round(math.tan(math.radians(angle)),3))-((9.81*(x**2))/(2*(init_velocity**2)*((round(math.cos(math.radians(angle)),3)))**2))
    plot_list.append(meta_list)
  print("===Hundred Points Of Trajectory===\n")
  print(plot_list,"\n")
  print("Time Of Flight is : ",round(time,2),"seconds\n")
  print("Maximum Height Reached : ",max(y_list),"meters\n")
  plt.plot(x_list,y_list)
  plt.xlabel('x - axis')
  plt.ylabel('y - axis') 
  plt.title('Trajectory')
  plt.show()
  
if choice == 1 :
  Ground(angle,init_velocity)
elif choice == 2:
  MidRange(angle,init_velocity)
else:
  quit

"""A hollow spherical ball of radius 20 cm floats in still water, with half of its volume submerged. Taking the density of water as 1000 kg/m3 , and the acceleration due to gravity as 10 m/s2 , the natural frequency of small oscillations of the ball, normal to the water surface is ____ radians/s (round off to 2 decimal places)."""

import math
def nfrequency(rad,den,submerged,g):
  mass = (den*submerged) * ( (4/3)*math.pi*(rad**3) )
  print("Mass of the Ball : ",round(mass,2),"Kgs")
  nf = ((den*(math.pi)*((rad)**2)*g)/mass)**0.5
  print("Natural Frequency Of the Ball : ",round(nf,2),"rad/s")

r = float(input("Enter the Radius In Centimeters : "))
rad=r*0.01
den = float(input("Enter The Density Of Water : "))
submerged = float(input("Enter The Percentage of Submerged Portion Of Ball : "))
g = float(input("Enter The Acceleration Due To Gravity : "))
nfrequency(rad,den,submerged,g)

"""Bars of 250 mm length and 25 mm diameter are to be turned on a lathe with a feed of 0.2 mm/rev. Each regrinding of the tool costs Rs. 20. The time required for each tool change is 1 min. Tool life equation is given as VT0.2 = 24 (where cutting speed V is in m/min and tool life T is in min). The optimum tool cost per piece for maximum production rate is Rs. ___ (round off to 2 decimal places)."""


